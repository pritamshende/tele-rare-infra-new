name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  ACR_LOGIN_SERVER: ${{ secrets.ACR_LOGIN_SERVER }}
  ACR_USERNAME: ${{ secrets.ACR_USERNAME }}
  ACR_PASSWORD: ${{ secrets.ACR_PASSWORD }}
  SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
  SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
  TRIVY_IGNORE_UNFIXED: true
  IMAGE_NAME: tele-rare-backend
  IMAGE_TAG: ${{ github.sha }}
  ARGOCD_SERVER: ${{ secrets.ARGOCD_SERVER }}
  ARGOCD_AUTH_TOKEN: ${{ secrets.ARGOCD_AUTH_TOKEN }}
  K8S_NAMESPACE: tele-rare

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Build with Maven
        run: |
          if [ -f "pom.xml" ]; then
            mvn clean package -DskipTests
          else
            echo "pom.xml not found, skipping Maven build"
          fi

      - name: SonarQube Scan
        if: env.SONAR_TOKEN != ''
        uses: SonarSource/sonarcloud-github-action@v2
        with:
          projectBaseDir: .
        env:
          SONAR_TOKEN: ${{ env.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ env.SONAR_HOST_URL }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Azure Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.ACR_LOGIN_SERVER }}
          username: ${{ env.ACR_USERNAME }}
          password: ${{ env.ACR_PASSWORD }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ env.ACR_LOGIN_SERVER }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}

      - name: Run Trivy Scan
        uses: aquasecurity/trivy-action@v0.11.1
        with:
          image-ref: ${{ env.ACR_LOGIN_SERVER }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}
          format: 'table'
          exit-code: '1'
          ignore-unfixed: true

      - name: Update Kubernetes manifests (set image tag)
        run: |
          if [ -f "k8s-gitops/deployment.yaml" ]; then
            sed -i "s|image: .*|image: ${{ env.ACR_LOGIN_SERVER }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}|" k8s-gitops/deployment.yaml
          else
            echo "k8s-gitops/deployment.yaml not found, skipping manifest update"
          fi

      - name: Commit and push updated deployment manifest
        if: success()
        run: |
          if [ -f "k8s-gitops/deployment.yaml" ]; then
            git config --global user.email "github-actions[bot]@users.noreply.github.com"
            git config --global user.name "github-actions[bot]"
            git add k8s-gitops/deployment.yaml
            git commit -m "Update image tag to ${{ env.IMAGE_TAG }} [skip ci]" || echo "No changes to commit"
            git push
          else
            echo "k8s-gitops/deployment.yaml not found, skipping commit"
          fi

      - name: Trigger ArgoCD Sync
        if: env.ARGOCD_AUTH_TOKEN != ''
        run: |
          curl -k -H "Authorization: Bearer ${{ env.ARGOCD_AUTH_TOKEN }}" \
            -X POST "${{ env.ARGOCD_SERVER }}/api/v1/applications/tele-rare-backend/sync" || echo "ArgoCD sync failed, continuing..."
